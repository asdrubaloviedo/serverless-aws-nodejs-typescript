service: serverless-aws-nodejs-ts
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: arn:aws:dynamodb:us-east-1:471112938813:table/appointmentTable4
        - Effect: Allow
          Action: 'sns:Publish' # Permiso para publicar en SNS
          Resource: !Ref SnsTopicPE
        - Effect: Allow
          Action: 'sns:Publish' # Permiso para publicar en SNS
          Resource: !Ref SnsTopicCL
        - Effect: Allow
          Action:
            - sns:Publish
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource: '*'

  environment:
    SNS_TOPIC_ARN_PE:
      Ref: SnsTopicPE
    SNS_TOPIC_ARN_CL:
      Ref: SnsTopicCL

plugins:
  - serverless-plugin-typescript

functions:
  getAppointment:
    handler: src/functions/getAppointment/handler.handler
    events:
      - httpApi:
          path: /appointment
          method: get
  addAppointment:
    handler: src/functions/addAppointment/handler.handler
    events:
      - httpApi:
          path: /appointment
          method: post
  processMessagePE:
    handler: src/functions/processMessagePE/handler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [MyQueue1, Arn]
          batchSize: 1 # Número de mensajes que la Lambda procesará por invocación
  processMessageCL:
    handler: src/functions/processMessageCL/handler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [MyQueue2, Arn]
          batchSize: 1 # Número de mensajes que la Lambda procesará por invocación

resources:
  Resources:
    appointmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: appointmentTable4
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SnsTopicPE:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: MySNSTopicPE
    SnsTopicCL:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: MySNSTopicCL
    # SQS Queue 1
    MyQueue1:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MyQueue1
        VisibilityTimeout: 60
    # SQS Queue 2
    MyQueue2:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MyQueue2
        VisibilityTimeout: 60
    # Política para permitir que SNS envíe mensajes a MyQueue1
    MyQueue1Policy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref MyQueue1
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: sqs:SendMessage
              Resource: !GetAtt MyQueue1.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SnsTopicPE
    # Política para permitir que SNS envíe mensajes a MyQueue2
    MyQueue2Policy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref MyQueue2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: sqs:SendMessage
              Resource: !GetAtt MyQueue2.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SnsTopicCL
    # Subscription for Queue 1 with a filter policy
    Queue1Subscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: SnsTopicPE
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [MyQueue1, Arn]
        # FilterPolicy:
        #   targetQueue:
        #     - queue1
    # Subscription for Queue 2 with a filter policy
    Queue2Subscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: SnsTopicCL
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [MyQueue2, Arn]
        # FilterPolicy:
        #   targetQueue:
        #     - queue2
